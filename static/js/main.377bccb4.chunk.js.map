{"version":3,"sources":["App.tsx","components/key.tsx","Theme.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","calContent","width","minHeight","backgroundColor","padding","borderRadius","label","color","palette","common","white","fontSize","fontFamily","fieldInput","notchedOutline","borderWidth","borderColor","tabs","App","classes","useTheme","React","useState","result","setResult","calculate","newResult","eval","e","reset","back","slice","handleClick","button","Theme","container","direction","justify","alignItems","style","height","item","className","component","Paper","elevation","marginBottom","marginTop","variant","align","id","fullWidth","value","InputLabelProps","InputProps","readOnly","map","tab","key","onClick","props","margin","name","createMuiTheme","grey","red","green","primary","main","secondary","text","typography","textTransform","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.377bccb4.chunk.js","sourcesContent":["import React from \"react\";\nimport Key from \"./components/key\";\nimport Theme from \"./Theme\";\nimport {\n  Grid,\n  useMediaQuery,\n  TextField,\n  Typography,\n  Paper,\n  Backdrop,\n} from \"@material-ui/core\";\nimport { useTheme, makeStyles } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  calContent: {\n    width: \"20em\",\n    minHeight: \"20em\",\n    backgroundColor: \"#576574\",\n    padding:\"0.5em\",\n    borderRadius:\"5px\"\n  },\n  label: {\n    color: theme.palette.common.white,\n    fontSize:\"1.5rem\",\n    fontFamily:\"Raleway\"\n  },\n  fieldInput:{\n    fontSize:\"1.5rem\",\n    \"& .MuiOutlinedInput-root\":{\n      fontSize:\"1.5rem\",\n      color:\"#f5f6fa\",\n    }\n  },\n  \n  notchedOutline:{\n    borderWidth: '1px',\n    borderColor: '#f5f6fa !important'\n  }\n}));\n\nconst tabs = [\n  \"(\",\n  \"CE\",\n  \")\",\n  \"C\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"+\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"-\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"*\",\n  \".\",\n  \"0\",\n  \"=\",\n  \"/\",\n];\n\nfunction App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [result,setResult]=React.useState(\"\")\n\n  const calculate=()=>{\n    try{\n      let newResult:string=(eval(result)+\"\")\n      setResult(newResult )\n    }catch(e){\n       setResult(\"ERROR\")\n    }\n  }\n  const reset=()=>{\n    setResult(\"\")\n  }\n  const back=()=>{\n    let newResult=result.slice(0,-1)\n    setResult(newResult)\n  }\n\n  const handleClick=(button:string)=>{\n     if(button === \"=\"){\n       calculate()\n     }else if(button === \"CE\"){\n       reset()\n     }else if(button === \"C\"){\n       back()\n     }else{\n       let newResult=result+button\n       setResult(newResult)\n     }\n  }\n\n  return (\n    <ThemeProvider theme={Theme}>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        style={{ height: \"100vh\",backgroundColor:\"#00d2d3\" }}\n      >\n        <Grid\n          item\n          container\n          direction=\"column\"\n          className={classes.calContent}\n          component={Paper}\n          elevation={20}\n        >\n          <Grid item style={{ marginBottom: 8,marginTop: 6 }}>\n            <Typography variant=\"h4\" align=\"center\" color=\"textPrimary\" style={{fontFamily:\"Pacifico\"}}>\n              Pan Calculator\n            </Typography>\n          </Grid>\n          <Grid item container direction=\"column\">\n            <Grid item style={{ marginBottom: 5 }}>\n              <TextField\n              className={classes.fieldInput}\n                id=\"outlined-basic\"\n                label=\"Calculator\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                fullWidth\n                value={result}\n                InputLabelProps={{\n                  className: classes.label,\n                }}\n                InputProps={{\n                  readOnly:true,\n                  classes:{\n                    notchedOutline:classes.notchedOutline\n                  }\n                }}\n              />\n            </Grid>\n            <Grid item container direction=\"row\">\n              <Grid item container justify=\"center\">\n                {tabs.map((tab) => (\n                  <Key key={tab} tab={tab} onClick={handleClick}/>\n                ))}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport { Grid, Button } from \"@material-ui/core\";\r\n\r\ntype tabType={\r\n    tab:string\r\n    onClick:Function\r\n}\r\n\r\nexport default function key(props:tabType) {\r\n  return (\r\n    <Grid style={{margin:\"5px\"}}>\r\n      <Button variant=\"contained\" color=\"secondary\" name={props.tab} onClick={()=>props.onClick(props.tab)}>\r\n        {props.tab}\r\n      </Button>\r\n    </Grid>\r\n  );\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nconst arcGrey = \"#576574\";\r\nconst arcGreen = \"#10ac84\";\r\nconst arcRed = \"#ee5253\";\r\nconst white=\"#f5f6fa\"\r\n\r\nconst Theme = createMuiTheme({\r\n  palette: {\r\n    common: {\r\n      grey: arcGrey,\r\n      red: arcRed,\r\n      green: arcGreen,\r\n    },\r\n    primary: {\r\n      main: `${arcGrey}`,\r\n    },\r\n    secondary: {\r\n      main: `${arcGreen}`,\r\n    },\r\n    text:{\r\n      primary:white\r\n    }\r\n  },\r\n  typography: {\r\n    tab: {\r\n      fontFamily: \"Raleway\",\r\n      textTransform: \"none\",\r\n      fontWeight: 300,\r\n      fontSize: \"1rem\",\r\n    },\r\n  },\r\n});\r\nexport default Theme","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}